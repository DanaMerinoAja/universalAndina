---
import type { Feature } from '@data/features';
import Button from '@components/ui/Button.astro';
import Eyebrow from '@components/ui/Eyebrow.astro';
import { getPaddingClass, getBackgroundColor, getTextColor } from '@utils/styleUtils';
import type { PaddingSize, ThemeColor } from '@utils/styleUtils';

export interface Props {
    content: {
        eyebrow?: string;
        title?: string;
        description?: string;
        button?: {
            text: string;
            link: string;
            variant?: 'primary' | 'secondary' | 'ghostLight' | 'ghostDark';
        };
        features: Feature[];
    };
    background?: ThemeColor;
    padding?: PaddingSize;
    paddingTop?: PaddingSize;
    paddingBottom?: PaddingSize;
}

const {
    content: {
        eyebrow,
        title,
        description,
        button,
        features
    },
    background = 'base'
} = Astro.props;

const bgColor = getBackgroundColor(background);
const textColor = getTextColor(background);
const paddingClass = getPaddingClass({ 
    padding: Astro.props.padding,
    paddingTop: Astro.props.paddingTop,
    paddingBottom: Astro.props.paddingBottom 
});
---

<section class:list={["relative", bgColor, paddingClass]}>
    <div class="site-container px-4">
        {(title || description) && (
            <div class="text-center mb-8 max-w-3xl mx-auto">
                {eyebrow && (
                    <Eyebrow 
                        text={eyebrow} 
                        background={background} 
                    />
                )}
                {title && (
                    <h2 data-aos="fade-up" class:list={["text-3xl font-bold mb-2", textColor]}>{title}</h2>
                )}
                {description && (
                    <p class:list={["mt-4", textColor, "opacity-90"]} data-aos="fade-up" data-aos-delay="100">
                        {description}
                    </p>
                )}
                {button && (
                    <div class="mt-8" data-aos="fade-up" data-aos-delay="200">
                        <Button
                            href={button.link}
                            variant={button.variant || 'primary'}
                        >
                            {button.text}
                        </Button>
                    </div>
                )}
            </div>
        )}

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-auto-fit gap-8 auto-rows-fr " >
            {features.map((feature, index) => (
                <a 
                    class:list={[
                        "p-6 rounded-lg border border-black", 'bg-primary' ,
                        "flex flex-col",
                        "cursor-pointer"
                    ]}
                    data-aos="fade-up"
                    data-aos-delay={index * 100}
                    href={feature.link}
                >
                    <div class:list={[
                        "w-12 h-12 flex items-center justify-center rounded-lg mb-4",
                        "bg-background-light"
                    ]}>
                        <feature.icon
                            size={24}
                            class="text-primary"
                        />
                    </div>
                    <h3 class:list={["text-h4 mb-2", "text-white"]}>
                        {feature.title}
                    </h3>
                    <!-- 
                    <p class:list={["text-base", "text-white", "opacity-90"]}>
                        {feature.description}
                    </p>-->
                </a>
            ))}
        </div>
    </div>
</section>

<style>
    .grid-cols-auto-fit {
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }
</style>
